# ---------------------------------------------------------------------------------
# Name: sunavadox
# Description: Your Best doxing tool!
# Author: @icansuck
# ---------------------------------------------------------------------------------
# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# ---------------------------------------------------------------------------------
# Author: @icansuck
# Commands: gb
# scope: hikka_only
# meta developer: @icansuck
# meta banner: https://mods.codrago.top/banners/DoxTool.png
# meta pic: https://0x0.st/s/QeZGoQSDvJ2RILRMUOjzfg/8KPc.webp
# ---------------------------------------------------------------------------------

__version__ = (1, 0, 0)

from telethon.tl.types import Message # type: ignore
from .. import loader, utils
import asyncio, random

@loader.tds
class dox(loader.Module):
    """—Å—ã–Ω –¥–æ–∫—Å–∞"""
    
    strings = {
    "name": "sunavadox",
    "gb_1": "Searching for the victim's number...",
    "gb_2": "Searching for the victim's address and name...",
    "gb_3": "Searching for parents...",
    "gb_4": "Searching for a school...",
    "gb_5": "Finding parents' jobs...",
    "gb_r": "you've been doxxed\n\n‚îú Phone: wrecked\n‚îú Country: normal\n‚îú Region: of liars\n‚îú Parents: soon will be gone\n‚îú Address: a ditch on Arbat\n‚îú Name: why were you born\n‚îú Middle name: missing\n‚îú Surname: missing\n‚îú How many times screwed: 32\n‚îú Gender: linoleum\n‚îú House: a ditch on Arbat\n‚îú Sucks per day: 20 (times) for 10 rub\n‚îú Hospital: not allowed in\n‚îú Poop color: none, doesn‚Äôt eat\n‚îú Prostate: massaged\n‚îú Mouth: ruined\n‚îî #####################\n\nMother: a prostitute\nMother‚Äôs workplace: the highway\nCountry: in the CIS\nCity: how should I know?\nBorn: somewhere under a fence\n\nFather: a homeless\nWorkplace: begging on the street\nCountry: in the CIS\nCity: how should I know?\nBorn: in the sewers\nSchool: of fools",
    "info": "–≤—ã–≤—ã–≤—ã—ã–≤ @icansuck"
    }
    strings_ru = {
    "name": "sunavadox",
    "gb_1": "–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –∂–µ—Ä—Ç–≤—ã...",
    "gb_2": "–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –∏ –∏–º–µ–Ω–∏ –∂–µ—Ä—Ç–≤—ã...",
    "gb_3": "–ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π...",
    "gb_4": "–ü–æ–∏—Å–∫ —à–∫–æ–ª—ã...",
    "gb_5": "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π...",
    "gb_r": "–¢–µ–±—è —Å–¥–µ–æ–Ω–∏–ª–∏, –µ–±–ª–∞–Ω\n\n‚îú –¢–µ–ª–µ—Ñ–æ–Ω: —Ä–∞–∑—ä–µ–±–∞–Ω–Ω—ã–π\n‚îú –°—Ç—Ä–∞–Ω–∞: –æ–±—ã—á–Ω–∞—è\n‚îú –†–µ–≥–∏–æ–Ω: –ø–∏–∑–¥–æ–±–æ–ª–æ–≤\n‚îú –†–æ–¥–∏—Ç–µ–ª–∏: —Å–∫–æ—Ä–æ –Ω–µ –±—É–¥–µ—Ç\n‚îú –ê–¥—Ä–µ—Å: –∫–∞–Ω–∞–≤–∞ –Ω–∞ –ê—Ä–±–∞—Ç–µ\n‚îú –ò–º—è: –Ω–∞—Ö—É–π —Ç—ã —Ä–æ–¥–∏–ª—Å—è\n‚îú –û—Ç—á–µ—Å—Ç–≤–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n‚îú –§–∞–º–∏–ª–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n‚îú –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –µ–±–∞–ª–∏ –≤ –¥—ã—Ä–∫—É: 32\n‚îú –ü–æ–ª: –ª–µ–Ω–æ–ª–∏—É–º\n‚îú –î–æ–º: –∫–∞–Ω–∞–≤–∞ –Ω–∞ –ê—Ä–±–∞—Ç–µ\n‚îú –°–æ—Å—ë—Ç –≤ –¥–µ–Ω—å: 20 (—Ä–∞–∑) –∑–∞ 10 —Ä—É–±\n‚îú –ë–æ–ª—å–Ω–∏—Ü–∞: –Ω–µ –ø—É—Å–∫–∞—é—Ç\n‚îú –¶–≤–µ—Ç –≥–æ–≤–Ω–∞: –Ω–µ—Ç—É, –∏–±–æ –Ω–µ —Ö–∞–≤–∞–µ—Ç\n‚îú –ü—Ä–æ—Å—Ç–∞—Ç–∞: –º–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–∞\n‚îú –†–æ—Ç: –≤—ã–µ–±–∞–Ω\n‚îî #####################\n\n–ú–∞—Ç—å: —à–ª—é—Ö–∞\n–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –º–∞—Ç–µ—Ä–∏: —Ç—Ä–∞—Å—Å–∞\n–°—Ç—Ä–∞–Ω–∞: —Å–æ—Å—Ç–æ—è—â–∞—è—Å—è –≤ –°–ù–ì\n–ì–æ—Ä–æ–¥: —è –µ–±—É?\n–†–æ–¥–∏–ª–∞—Å—å: –≥–¥–µ-—Ç–æ –ø–æ–¥ –∑–∞–±–æ—Ä–æ–º\n\n–û—Ç–µ—Ü: –±–æ–º–∂,\n–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: –Ω–∞ —É–ª–∏—Ü–µ –±–∏—á–µ–≤–∞—Ç—å, –ø—Ä–æ—Å–∏—Ç—å –º–µ–ª–æ—á—å\n–°—Ç—Ä–∞–Ω–∞: —Å–æ—Å—Ç–æ—è—â–∞—è—Å—è –≤ –°–ù–ì\n–ì–æ—Ä–æ–¥: —è –µ–±—É?\n–†–æ–¥–∏–ª—Å—è: –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n–®–∫–æ–ª–∞: –¥–∞–ª–±–æ–µ–±–æ–≤",
    "info": "—ã—ã–≤—ã—ã–æ–≤—ã @icansuck"
    }


    
    async def gbcmd(self, message):
        """search in databases eye of god!"""
        await utils.answer(message, self.strings["gb_1"])
        await asyncio.sleep(1)
        await message.edit(self.strings["gb_2"])
        await asyncio.sleep(1)
        await message.edit(self.strings["gb_3"])
        await asyncio.sleep(1)
        await message.edit(self.strings["gb_4"])
        await asyncio.sleep(1)
        await message.edit(self.strings["gb_5"])
        await asyncio.sleep(1)
        await message.edit(self.strings["gb_r"])

    async def deanoncmd(self, message):
        """Full information of user in global database"""
        deanon = ["zzzz vzzvzv", "zovzozocoxovoix"]
        await utils.answer(message, random.choice(deanon))

    async def dinfocmd(self, message):
        """info of module"""
        await utils.answer(message, self.strings["info"])
